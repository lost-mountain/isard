// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	CreateAccountRequest
	CreateAccountResponse
	UpdateAccountRequest
	UpdateAccountResponse
	CreateCertificateRequest
	CreateCertificateResponse
	ResolveChallengeRequest
	ResolveChallengeResponse
	CertificateStateRequest
	CertificateStateResponse
	GetCertificateRequest
	GetCertificateResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountEnvironment int32

const (
	AccountEnvironment_PRODUCTION AccountEnvironment = 0
	AccountEnvironment_STAGING    AccountEnvironment = 1
)

var AccountEnvironment_name = map[int32]string{
	0: "PRODUCTION",
	1: "STAGING",
}
var AccountEnvironment_value = map[string]int32{
	"PRODUCTION": 0,
	"STAGING":    1,
}

func (x AccountEnvironment) String() string {
	return proto.EnumName(AccountEnvironment_name, int32(x))
}
func (AccountEnvironment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateAccountRequest struct {
	Owner       string             `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Key         string             `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Environment AccountEnvironment `protobuf:"varint,3,opt,name=environment,enum=rpc.AccountEnvironment" json:"environment,omitempty"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateAccountRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CreateAccountRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateAccountRequest) GetEnvironment() AccountEnvironment {
	if m != nil {
		return m.Environment
	}
	return AccountEnvironment_PRODUCTION
}

type CreateAccountResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *CreateAccountResponse) Reset()                    { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()               {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateAccountResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateAccountResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UpdateAccountRequest struct {
	Id          string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Environment AccountEnvironment `protobuf:"varint,2,opt,name=environment,enum=rpc.AccountEnvironment" json:"environment,omitempty"`
}

func (m *UpdateAccountRequest) Reset()                    { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()               {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAccountRequest) GetEnvironment() AccountEnvironment {
	if m != nil {
		return m.Environment
	}
	return AccountEnvironment_PRODUCTION
}

type UpdateAccountResponse struct {
}

func (m *UpdateAccountResponse) Reset()                    { *m = UpdateAccountResponse{} }
func (m *UpdateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountResponse) ProtoMessage()               {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CreateCertificateRequest struct {
	AccountID     string `protobuf:"bytes,1,opt,name=accountID" json:"accountID,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	ChallengeType string `protobuf:"bytes,3,opt,name=challengeType" json:"challengeType,omitempty"`
}

func (m *CreateCertificateRequest) Reset()                    { *m = CreateCertificateRequest{} }
func (m *CreateCertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCertificateRequest) ProtoMessage()               {}
func (*CreateCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateCertificateRequest) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *CreateCertificateRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CreateCertificateRequest) GetChallengeType() string {
	if m != nil {
		return m.ChallengeType
	}
	return ""
}

type CreateCertificateResponse struct {
	AccountID string `protobuf:"bytes,1,opt,name=accountID" json:"accountID,omitempty"`
	DomainID  string `protobuf:"bytes,2,opt,name=domainID" json:"domainID,omitempty"`
	State     string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *CreateCertificateResponse) Reset()                    { *m = CreateCertificateResponse{} }
func (m *CreateCertificateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCertificateResponse) ProtoMessage()               {}
func (*CreateCertificateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateCertificateResponse) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *CreateCertificateResponse) GetDomainID() string {
	if m != nil {
		return m.DomainID
	}
	return ""
}

func (m *CreateCertificateResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type ResolveChallengeRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *ResolveChallengeRequest) Reset()                    { *m = ResolveChallengeRequest{} }
func (m *ResolveChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*ResolveChallengeRequest) ProtoMessage()               {}
func (*ResolveChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResolveChallengeRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type ResolveChallengeResponse struct {
	Certificate string `protobuf:"bytes,1,opt,name=certificate" json:"certificate,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Chain       string `protobuf:"bytes,3,opt,name=chain" json:"chain,omitempty"`
}

func (m *ResolveChallengeResponse) Reset()                    { *m = ResolveChallengeResponse{} }
func (m *ResolveChallengeResponse) String() string            { return proto.CompactTextString(m) }
func (*ResolveChallengeResponse) ProtoMessage()               {}
func (*ResolveChallengeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResolveChallengeResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *ResolveChallengeResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ResolveChallengeResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

type CertificateStateRequest struct {
	AccountID string `protobuf:"bytes,1,opt,name=accountID" json:"accountID,omitempty"`
	DomainID  string `protobuf:"bytes,2,opt,name=domainID" json:"domainID,omitempty"`
}

func (m *CertificateStateRequest) Reset()                    { *m = CertificateStateRequest{} }
func (m *CertificateStateRequest) String() string            { return proto.CompactTextString(m) }
func (*CertificateStateRequest) ProtoMessage()               {}
func (*CertificateStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CertificateStateRequest) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *CertificateStateRequest) GetDomainID() string {
	if m != nil {
		return m.DomainID
	}
	return ""
}

type CertificateStateResponse struct {
}

func (m *CertificateStateResponse) Reset()                    { *m = CertificateStateResponse{} }
func (m *CertificateStateResponse) String() string            { return proto.CompactTextString(m) }
func (*CertificateStateResponse) ProtoMessage()               {}
func (*CertificateStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GetCertificateRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *GetCertificateRequest) Reset()                    { *m = GetCertificateRequest{} }
func (m *GetCertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCertificateRequest) ProtoMessage()               {}
func (*GetCertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetCertificateRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type GetCertificateResponse struct {
	Certificate string `protobuf:"bytes,1,opt,name=certificate" json:"certificate,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Chain       string `protobuf:"bytes,3,opt,name=chain" json:"chain,omitempty"`
}

func (m *GetCertificateResponse) Reset()                    { *m = GetCertificateResponse{} }
func (m *GetCertificateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCertificateResponse) ProtoMessage()               {}
func (*GetCertificateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetCertificateResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *GetCertificateResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetCertificateResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateAccountRequest)(nil), "rpc.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "rpc.CreateAccountResponse")
	proto.RegisterType((*UpdateAccountRequest)(nil), "rpc.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "rpc.UpdateAccountResponse")
	proto.RegisterType((*CreateCertificateRequest)(nil), "rpc.CreateCertificateRequest")
	proto.RegisterType((*CreateCertificateResponse)(nil), "rpc.CreateCertificateResponse")
	proto.RegisterType((*ResolveChallengeRequest)(nil), "rpc.ResolveChallengeRequest")
	proto.RegisterType((*ResolveChallengeResponse)(nil), "rpc.ResolveChallengeResponse")
	proto.RegisterType((*CertificateStateRequest)(nil), "rpc.CertificateStateRequest")
	proto.RegisterType((*CertificateStateResponse)(nil), "rpc.CertificateStateResponse")
	proto.RegisterType((*GetCertificateRequest)(nil), "rpc.GetCertificateRequest")
	proto.RegisterType((*GetCertificateResponse)(nil), "rpc.GetCertificateResponse")
	proto.RegisterEnum("rpc.AccountEnvironment", AccountEnvironment_name, AccountEnvironment_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*CreateCertificateResponse, error)
	ResolveCertificateChallenge(ctx context.Context, in *ResolveChallengeRequest, opts ...grpc.CallOption) (*ResolveChallengeResponse, error)
	CheckCertificateState(ctx context.Context, in *CertificateStateRequest, opts ...grpc.CallOption) (*CertificateStateResponse, error)
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := grpc.Invoke(ctx, "/rpc.API/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := grpc.Invoke(ctx, "/rpc.API/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*CreateCertificateResponse, error) {
	out := new(CreateCertificateResponse)
	err := grpc.Invoke(ctx, "/rpc.API/CreateCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ResolveCertificateChallenge(ctx context.Context, in *ResolveChallengeRequest, opts ...grpc.CallOption) (*ResolveChallengeResponse, error) {
	out := new(ResolveChallengeResponse)
	err := grpc.Invoke(ctx, "/rpc.API/ResolveCertificateChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CheckCertificateState(ctx context.Context, in *CertificateStateRequest, opts ...grpc.CallOption) (*CertificateStateResponse, error) {
	out := new(CertificateStateResponse)
	err := grpc.Invoke(ctx, "/rpc.API/CheckCertificateState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error) {
	out := new(GetCertificateResponse)
	err := grpc.Invoke(ctx, "/rpc.API/GetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	CreateCertificate(context.Context, *CreateCertificateRequest) (*CreateCertificateResponse, error)
	ResolveCertificateChallenge(context.Context, *ResolveChallengeRequest) (*ResolveChallengeResponse, error)
	CheckCertificateState(context.Context, *CertificateStateRequest) (*CertificateStateResponse, error)
	GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.API/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.API/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.API/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCertificate(ctx, req.(*CreateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ResolveCertificateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ResolveCertificateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.API/ResolveCertificateChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ResolveCertificateChallenge(ctx, req.(*ResolveChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CheckCertificateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CheckCertificateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.API/CheckCertificateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CheckCertificateState(ctx, req.(*CertificateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.API/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _API_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _API_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateCertificate",
			Handler:    _API_CreateCertificate_Handler,
		},
		{
			MethodName: "ResolveCertificateChallenge",
			Handler:    _API_ResolveCertificateChallenge_Handler,
		},
		{
			MethodName: "CheckCertificateState",
			Handler:    _API_CheckCertificateState_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _API_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0x9b, 0x40,
	0x10, 0xad, 0x8d, 0x92, 0xd6, 0x63, 0xd9, 0x72, 0x57, 0x76, 0x4c, 0x48, 0x52, 0x59, 0xa8, 0x87,
	0xa8, 0x87, 0x54, 0x49, 0x4f, 0x3d, 0xf4, 0x60, 0xe1, 0xc6, 0xe2, 0x92, 0x44, 0xd8, 0xb9, 0xf4,
	0x46, 0x60, 0x5a, 0x23, 0x3b, 0x2c, 0x85, 0x8d, 0x2b, 0xff, 0x70, 0xbf, 0xa3, 0x82, 0x1d, 0x02,
	0x86, 0x25, 0x6a, 0xa5, 0xde, 0x98, 0x1d, 0xf6, 0xbd, 0x37, 0x8f, 0x37, 0x40, 0x27, 0x8e, 0xbc,
	0x8b, 0x28, 0xe6, 0x82, 0x33, 0x2d, 0x8e, 0x3c, 0x73, 0x07, 0x43, 0x2b, 0x46, 0x57, 0xe0, 0xd4,
	0xf3, 0xf8, 0x53, 0x28, 0x1c, 0xfc, 0xf9, 0x84, 0x89, 0x60, 0x43, 0x38, 0xe0, 0xbf, 0x42, 0x8c,
	0xf5, 0xd6, 0xa4, 0x75, 0xde, 0x71, 0x64, 0xc1, 0x06, 0xa0, 0xad, 0x71, 0xa7, 0xb7, 0xb3, 0xb3,
	0xf4, 0x91, 0x7d, 0x86, 0x2e, 0x86, 0xdb, 0x20, 0xe6, 0xe1, 0x23, 0x86, 0x42, 0xd7, 0x26, 0xad,
	0xf3, 0xfe, 0xd5, 0xf8, 0x22, 0x65, 0x21, 0xc4, 0xaf, 0x45, 0xdb, 0x29, 0xbf, 0x6b, 0x7e, 0x81,
	0x51, 0x85, 0x3a, 0x89, 0x78, 0x98, 0x20, 0xeb, 0x43, 0x3b, 0xf0, 0x89, 0xb8, 0x1d, 0xf8, 0xa9,
	0x16, 0xc1, 0xd7, 0x18, 0x12, 0xaf, 0x2c, 0x4c, 0x17, 0x86, 0xf7, 0x91, 0x5f, 0x57, 0x5e, 0xbd,
	0x5d, 0x51, 0xd8, 0xfe, 0x07, 0x85, 0x63, 0x18, 0x55, 0x28, 0xa4, 0x42, 0x73, 0x0b, 0xba, 0x94,
	0x6e, 0x61, 0x2c, 0x82, 0xef, 0x81, 0xe7, 0x0a, 0xcc, 0xf9, 0x4f, 0xa1, 0xe3, 0xca, 0xd7, 0xed,
	0x19, 0xc9, 0x28, 0x0e, 0xd8, 0x11, 0x1c, 0xfa, 0xfc, 0xd1, 0x0d, 0xf2, 0x61, 0xa8, 0x62, 0xef,
	0xa1, 0xe7, 0xad, 0xdc, 0xcd, 0x06, 0xc3, 0x1f, 0xb8, 0xdc, 0x45, 0x98, 0x39, 0xd9, 0x71, 0xf6,
	0x0f, 0xcd, 0x35, 0x1c, 0x2b, 0x78, 0xc9, 0xb6, 0x97, 0x89, 0x0d, 0x78, 0x23, 0xa9, 0xec, 0x19,
	0x51, 0x3f, 0xd7, 0xa9, 0xc1, 0x89, 0x70, 0x45, 0x4e, 0x2a, 0x0b, 0xf3, 0x12, 0xc6, 0x0e, 0x26,
	0x7c, 0xb3, 0x45, 0x2b, 0x17, 0x91, 0xcf, 0x58, 0x4c, 0xd1, 0x2a, 0x4f, 0x61, 0xfa, 0xa0, 0xd7,
	0xaf, 0x90, 0xbc, 0x09, 0x74, 0xbd, 0x42, 0x35, 0x5d, 0x2c, 0x1f, 0x29, 0xd2, 0x35, 0x84, 0x03,
	0x6f, 0x95, 0xd2, 0x90, 0xb0, 0xac, 0x30, 0x17, 0x30, 0x2e, 0xcd, 0xbf, 0x10, 0x7f, 0x6d, 0xfe,
	0x0b, 0x1e, 0x98, 0x06, 0xe8, 0x75, 0x50, 0xfa, 0xdc, 0x1f, 0x61, 0x34, 0x47, 0xa1, 0xf8, 0xd6,
	0x4d, 0x3e, 0x3c, 0xc0, 0x51, 0xf5, 0xc2, 0xff, 0x76, 0xe1, 0xc3, 0x25, 0xb0, 0x7a, 0x7e, 0x59,
	0x1f, 0xe0, 0xce, 0xb9, 0x9d, 0xdd, 0x5b, 0x4b, 0xfb, 0xf6, 0x66, 0xf0, 0x8a, 0x75, 0xe1, 0xf5,
	0x62, 0x39, 0x9d, 0xdb, 0x37, 0xf3, 0x41, 0xeb, 0xea, 0xb7, 0x06, 0xda, 0xf4, 0xce, 0x66, 0xd7,
	0xd0, 0xdb, 0xdb, 0x3c, 0x76, 0x9c, 0xad, 0x83, 0xea, 0x47, 0x60, 0x18, 0xaa, 0x16, 0x0d, 0x73,
	0x0d, 0xbd, 0xbd, 0xfd, 0x20, 0x1c, 0xd5, 0x5a, 0x12, 0x8e, 0x72, 0x9d, 0x98, 0x03, 0x6f, 0x6b,
	0xb1, 0x66, 0x67, 0x25, 0xe2, 0xba, 0xf5, 0xc6, 0xbb, 0xa6, 0x36, 0x61, 0x7e, 0x83, 0x93, 0x3c,
	0x8a, 0x45, 0xf7, 0x39, 0x95, 0xec, 0x34, 0xbb, 0xde, 0x90, 0x6f, 0xe3, 0xac, 0xa1, 0x4b, 0xd8,
	0x4b, 0x18, 0x59, 0x2b, 0xf4, 0xd6, 0xd5, 0xc0, 0x10, 0x6a, 0x43, 0x38, 0x09, 0xb5, 0x29, 0x65,
	0xcc, 0x86, 0xfe, 0x7e, 0x68, 0x98, 0xf4, 0x4c, 0x19, 0x3d, 0xe3, 0x44, 0xd9, 0x93, 0x50, 0x0f,
	0x87, 0xd9, 0x1f, 0xfe, 0xd3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0xf2, 0xce, 0xd9, 0xee,
	0x05, 0x00, 0x00,
}
